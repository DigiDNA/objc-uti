/*******************************************************************************
 * Copyright (c) 2014, Jean-David Gadina - www.xs-labs.com
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/
 
/* $Id$ */

/*!
 * @file        UTI.m
 * @copyright   (c) 2014 - Jean-David Gadina - www.xs-labs.com
 * @abstract    Objective-C wrapper class for Uniform Type Identifiers (UTIs)
 */

#import "UTI.h"

#ifdef __IPHONE_OS_VERSION_MIN_REQUIRED

@import MobileCoreServices;

#else

@import CoreServices;

#endif

@interface UTI()
{}

@end

@implementation UTI

+ ( instancetype )UTIWithString: ( NSString * )str
{
    ( void )str;
    
    return nil;
}

+ ( instancetype )UTIWithCFString: ( CFStringRef )str
{
    ( void )str;
    
    return nil;
}

+ ( instancetype )UTIWithFileExtension: ( NSString * )extension
{
    ( void )extension;
    
    return nil;
}

+ ( instancetype )UTIWithFileExtension: ( NSString * )extension conformingTo: ( UTI * )uti
{
    ( void )extension;
    ( void )uti;
    
    return nil;
}

+ ( instancetype )UTIWithMIMEType: ( NSString * )type
{
    ( void )type;
    
    return nil;
}

+ ( instancetype )UTIWithMIMEType: ( NSString * )type conformingTo: ( UTI * )uti
{
    ( void )type;
    ( void )uti;
    
    return nil;
}

+ ( instancetype )UTIWithNSPboardType: ( NSString * )type
{
    ( void )type;
    
    return nil;
}

+ ( instancetype )UTIWithNSPboardType: ( NSString * )type conformingTo: ( UTI * )uti
{
    ( void )type;
    ( void )uti;
    
    return nil;
}

+ ( instancetype )UTIWithOSType: ( NSString * )type
{
    ( void )type;
    
    return nil;
}

+ ( instancetype )UTIWithOSType: ( NSString * )type conformingTo: ( UTI * )uti
{
    ( void )type;
    ( void )uti;
    
    return nil;
}

+ ( instancetype )UTIWithTag: ( NSString * )tag tagClass: ( UTITagClass )tagClass conformingTo: ( UTI * )uti
{
    ( void )tag;
    ( void )tagClass;
    ( void )uti;
    
    return nil;
}

+ ( NSArray * )abstractTypes
{
    return nil;
}

+ ( NSArray * )concreteTypes
{
    return nil;
}

+ ( NSArray * )compositeContentTypes
{
    return nil;
}

+ ( NSArray * )imageContentTypes
{
    return nil;
}

+ ( NSArray * )audioVisualContentTypes
{
    return nil;
}

+ ( NSArray * )directoryTypes
{
    return nil;
}

+ ( NSArray * )applicationTypes
{
    return nil;
}

+ ( NSArray * )miscellaneousTypes
{
    return nil;
}

+ ( instancetype )itemTypeUTI
{
    return nil;
}

+ ( instancetype )contentTypeUTI
{
    return nil;
}

+ ( instancetype )compositeContentTypeUTI
{
    return nil;
}

+ ( instancetype )applicationTypeUTI
{
    return nil;
}

+ ( instancetype )messageTypeUTI
{
    return nil;
}

+ ( instancetype )contactTypeUTI
{
    return nil;
}

+ ( instancetype )archiveTypeUTI
{
    return nil;
}

+ ( instancetype )diskImageTypeUTI
{
    return nil;
}

+ ( instancetype )dataTypeUTI
{
    return nil;
}

+ ( instancetype )directoryTypeUTI
{
    return nil;
}

+ ( instancetype )resolvableTypeUTI
{
    return nil;
}

+ ( instancetype )symLinkTypeUTI
{
    return nil;
}

+ ( instancetype )mountPointTypeUTI
{
    return nil;
}

+ ( instancetype )aliasFileTypeUTI
{
    return nil;
}

+ ( instancetype )aliasRecordTypeUTI
{
    return nil;
}

+ ( instancetype )URLTypeUTI
{
    return nil;
}

+ ( instancetype )fileURLTypeUTI
{
    return nil;
}

+ ( instancetype )textTypeUTI
{
    return nil;
}

+ ( instancetype )plainTextTypeUTI
{
    return nil;
}

+ ( instancetype )UTF8PlainTextTypeUTI
{
    return nil;
}

+ ( instancetype )UTF16ExternalPlainTextTypeUTI
{
    return nil;
}

+ ( instancetype )UTF16PlainTextTypeUTI
{
    return nil;
}

+ ( instancetype )RTFTypeUTI
{
    return nil;
}

+ ( instancetype )HTMLTypeUTI
{
    return nil;
}

+ ( instancetype )XMLTypeUTI
{
    return nil;
}

+ ( instancetype )sourceCodeTypeUTI
{
    return nil;
}

+ ( instancetype )CSourceTypeUTI
{
    return nil;
}

+ ( instancetype )objectiveCSourceTypeUTI
{
    return nil;
}

+ ( instancetype )CPlusPlusSourceTypeUTI
{
    return nil;
}

+ ( instancetype )objectiveCPlusPlusSourceTypeUTI
{
    return nil;
}

+ ( instancetype )CHeaderTypeUTI
{
    return nil;
}

+ ( instancetype )CPlusPlusHeaderTypeUTI
{
    return nil;
}

+ ( instancetype )javaSourceTypeUTI
{
    return nil;
}

+ ( instancetype )PDFTypeUTI
{
    return nil;
}

+ ( instancetype )RTFDTypeUTI
{
    return nil;
}

+ ( instancetype )flatRTFDTypeUTI
{
    return nil;
}

+ ( instancetype )TXNTextAndMultimediaDataTypeUTI
{
    return nil;
}

+ ( instancetype )webArchiveTypeUTI
{
    return nil;
}

+ ( instancetype )imageTypeUTI
{
    return nil;
}

+ ( instancetype )JPEGTypeUTI
{
    return nil;
}

+ ( instancetype )JPEG2000TypeUTI
{
    return nil;
}

+ ( instancetype )TIFFTypeUTI
{
    return nil;
}

+ ( instancetype )PICTTypeUTI
{
    return nil;
}

+ ( instancetype )GIFTypeUTI
{
    return nil;
}

+ ( instancetype )PNGTypeUTI
{
    return nil;
}

+ ( instancetype )quickTimeImageTypeUTI
{
    return nil;
}

+ ( instancetype )appleICNS
{
    return nil;
}

+ ( instancetype )BMPTypeUTI
{
    return nil;
}

+ ( instancetype )ICOTypeUTI
{
    return nil;
}

+ ( instancetype )audiovisualContentTypeUTI
{
    return nil;
}

+ ( instancetype )movieTypeUTI
{
    return nil;
}

+ ( instancetype )videoTypeUTI
{
    return nil;
}

+ ( instancetype )audioTypeUTI
{
    return nil;
}

+ ( instancetype )quickTimeMovieTypeUTI
{
    return nil;
}

+ ( instancetype )MPEGTypeUTI
{
    return nil;
}

+ ( instancetype )MPEG4TypeUTI
{
    return nil;
}

+ ( instancetype )MP3TypeUTI
{
    return nil;
}

+ ( instancetype )MPEG4AudioTypeUTI
{
    return nil;
}

+ ( instancetype )appleProtectedMPEG4AudioTypeUTI
{
    return nil;
}

+ ( instancetype )folderTypeUTI
{
    return nil;
}

+ ( instancetype )volumeTypeUTI
{
    return nil;
}

+ ( instancetype )packageTypeUTI
{
    return nil;
}

+ ( instancetype )bundleTypeUTI
{
    return nil;
}

+ ( instancetype )frameworkTypeUTI
{
    return nil;
}

+ ( instancetype )applicationBundleTypeUTI
{
    return nil;
}

+ ( instancetype )applicationFileTypeUTI
{
    return nil;
}

+ ( instancetype )vCardTypeUTI
{
    return nil;
}

+ ( instancetype )inkTextTypeUTI
{
    return nil;
}

+ ( NSArray * )allUTIsWithFileExtension: ( NSString * )extension
{
    ( void )extension;
    
    return nil;
}

+ ( NSArray * )allUTIsWithFileExtension: ( NSString * )extension conformingTo: ( UTI * )uti
{
    ( void )extension;
    ( void )uti;
    
    return nil;
}

+ ( NSArray * )allUTIsWithMIMEType: ( NSString * )type
{
    ( void )type;
    
    return nil;
}

+ ( NSArray * )allUTIsWithMIMEType: ( NSString * )type conformingTo: ( UTI * )uti
{
    ( void )type;
    ( void )uti;
    
    return nil;
}

+ ( NSArray * )allUTIsWithNSPboardType: ( NSString * )type
{
    ( void )type;
    
    return nil;
}

+ ( NSArray * )allUTIsWithNSPboardType: ( NSString * )type conformingTo: ( UTI * )uti
{
    ( void )type;
    ( void )uti;
    
    return nil;
}

+ ( NSArray * )allUTIsWithOSType: ( NSString * )type
{
    ( void )type;
    
    return nil;
}

+ ( NSArray * )allUTIsWithOSType: ( NSString * )type conformingTo: ( UTI * )uti
{
    ( void )type;
    ( void )uti;
    
    return nil;
}

+ ( NSArray * )allUTIsWithTag: ( NSString * )tag tagClass: ( UTITagClass )tagClass conformingTo: ( UTI * )uti
{
    ( void )tag;
    ( void )tagClass;
    ( void )uti;
    
    return nil;
}

+ ( NSString * )stringForOSType: ( OSType )type
{
    ( void )type;
    
    return nil;
}

+ ( OSType )OSTypeForString: ( NSString * )str
{
    ( void )str;
    
    return 0;
}

- ( instancetype )initWithString: ( NSString * )str
{
    return [ self initWithCFString: ( __bridge CFStringRef )str ];
}

- ( instancetype )initWithCFString: ( CFStringRef )str /* NS_DESIGNATED_INITIALIZER */
{
    ( void )str;
    
    return nil;
}

- ( instancetype )initWithFileExtension: ( NSString * )extension
{
    return [ self initWithFileExtension: extension conformingTo: nil ];
}

- ( instancetype )initWithFileExtension: ( NSString * )extension conformingTo: ( UTI * )uti
{
    return [ self initWithTag: extension tagClass: UTITagClassFilenameExtension conformingTo: uti ];
}

- ( instancetype )initWithMIMEType: ( NSString * )type
{
    return [ self initWithMIMEType: type conformingTo: nil ];
}

- ( instancetype )initWithMIMEType: ( NSString * )type conformingTo: ( UTI * )uti
{
    return [ self initWithTag: type tagClass: UTITagClassMIMEType conformingTo: uti ];
}

- ( instancetype )initWithNSPboardType: ( NSString * )type
{
    return [ self initWithNSPboardType: type conformingTo: nil ];
}

- ( instancetype )initWithNSPboardType: ( NSString * )type conformingTo: ( UTI * )uti
{
    return [ self initWithTag: type tagClass: UTITagClassNSPboardType conformingTo: uti ];
}

- ( instancetype )initWithOSType: ( NSString * )type
{
    return [ self initWithOSType: type conformingTo: nil ];
}

- ( instancetype )initWithOSType: ( NSString * )type conformingTo: ( UTI * )uti
{
    return [ self initWithTag: type tagClass: UTITagClassOSType conformingTo: uti ];
}

- ( instancetype )initWithTag: ( NSString * )tag tagClass: ( UTITagClass )tagClass conformingTo: ( UTI * )uti /* NS_DESIGNATED_INITIALIZER */
{
    ( void )tag;
    ( void )tagClass;
    ( void )uti;
    
    return nil;
}

- ( id )copyWithZone: ( NSZone * )zone
{
    ( void )zone;
    
    return nil;
}

- ( NSString * )preferredTagForTagClass: ( UTITagClass )tagClass
{
    ( void )tagClass;
    
    return nil;
}

- ( BOOL )isEqualToUTI: ( UTI * )uti
{
    ( void )uti;
    
    return NO;
}

- ( BOOL )conformsToUTI: ( UTI * )uti
{
    ( void )uti;
    
    return NO;
}

- ( id )objectForDeclarationDictionaryKey: ( UTIDeclarationDictionaryKey )key
{
    ( void )key;
    
    return nil;
}

- ( NSString * )preferredFilenameExtension
{
    return nil;
}

- ( NSString * )preferredMIMEType
{
    return nil;
}

- ( NSString * )preferredNSPboardType
{
    return nil;
}

- ( NSString * )preferredOSType
{
    return nil;
}

- ( NSString * )description
{
    return nil;
}

- ( NSDictionary * )declaration
{
    return nil;
}

- ( NSURL * )declaringBundleURL
{
    return nil;
}

- ( NSArray * )exportedTypes
{
    return nil;
}

- ( NSArray * )importedTypes
{
    return nil;
}

- ( NSString * )identifier
{
    return nil;
}

- ( NSDictionary * )tagSpecifications
{
    return nil;
}

- ( NSArray * )conformsTo
{
    return nil;
}

- ( NSString * )iconFile
{
    return nil;
}

- ( NSURL * )referenceURL
{
    return nil;
}

- ( NSString * )version
{
    return nil;
}

@end
